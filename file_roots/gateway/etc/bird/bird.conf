# This file is managed by Salt, do not edit.
#router id <internal ipv4 address server (ffhf)>

protocol direct {
	interface "*"; # Restrict network interfaces it works with
};

protocol kernel {
	device routes;
	import all;
	export all; # Default is export none
	kernel table 42; # Kernel table to synchronize with (default: main)
};

protocol device {
	scan time 8; # Scan interfaces every 10 seconds
};

function is_default() {
	return (net ~ [0.0.0.0/0]);
};



# interne BIRD Routing-Tabelle
table ffrl;

define ffrl_nat_address = 185.66.195.36; #ffrlnat

# Funktionen, die später aufgerufen werden
function is_ffrl_nat() {
    return net ~ [
        185.66.195.36/32
    ];
}

function is_ffrl_tunnel_nets() {
    return net ~ [
    	{% for backbone in pillar['exit']['ffrl'] %}
        {{ pillar['exit']['ffrl'][backbone]['tunnel']['ipv4']['address'] }}/31{% if not loop.last %},{% endif %}
        {% endfor %}
    ];
}

# BGP Import Filter für Rheinland
filter ebgp_ffrl_import_filter {
    if is_default() then accept;
    reject;
}

# BGP Export Filter für Rheinland
filter ebgp_ffrl_export_filter {
    if is_ffrl_nat() then accept;
    reject;
}

# IP-NAT-Adresse legen wir in die interne BIRD Routing Table
protocol static ffrl_uplink_hostroute {
    table ffrl;
    route {{ pillar['exit']['ffrl']['address'] }}/32 reject;
#    route 185.66.195.36/32 reject;
}

# Wir legen die Transfernetze in die interne BIRD Routing Table
protocol direct {
    table ffrl;
    interface "ffrl-*";
    import where is_ffrl_tunnel_nets();
}

# Wir exportieren über Rheinland gelernte Routen in die Kernel Table 61 (ffinetexit)
protocol kernel kernel_ffrl {
    scan time 30;
    import none;
    export filter {
        krt_prefsrc = ffrl_nat_address;
        accept;
    };
    table ffrl;
    kernel table 61;
};

# BGP Template für Rheinland Peerings
template bgp ffrl_uplink {
    table ffrl;
    local as 65037; # AS Number ?? Private ASN 64,512 to 65,534 Autonomous system Number
    import keep filtered;
    import filter ebgp_ffrl_import_filter;
    export filter ebgp_ffrl_export_filter;
    next hop self;
    direct;
};

# P E E R I N G S

{% for backbone in pillar['exit']['ffrl'] %}
# {{ backbone }}
protocol bgp ffrl_{{ pillar['exit']['ffrl'][backbone]['interface'] }} from ffrl_uplink {
    source address {{ pillar['exit']['ffrl'][backbone]['tunnel']['ipv4']['address'] }};
    neighbor ??? 100.64.1.190 as 201701;
	{% if loop.first %}default bgp_local_pref 200;{% endif %}
};
{% endfor %}
